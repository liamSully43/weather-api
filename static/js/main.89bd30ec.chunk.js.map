{"version":3,"sources":["Components/Weather-Card.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["WeatherCard","props","cel","data","setState","current","temp_c","average","day","avgtemp_c","feel","feelslike_c","high","maxtemp_c","low","mintemp_c","wind","maxwind_mph","prec","totalprecip_mm","fah","temp_f","avgtemp_f","feelslike_f","maxtemp_f","mintemp_f","maxwind_kph","totalprecip_in","condition","Fragment","className","src","icon","height","width","alt","text","title","state","style","color","onClick","changeDegrees","date","substring","length","Number","toggleDetails","display","detailsButtonDisplay","oldProps","this","degree","geoAllowed","id","position","avghumidity","fontSize","daily_chance_of_rain","daily_chance_of_snow","uv","astro","sunrise","sunset","React","Component","defaultProps","avgvis_miles","avgvis_km","Header","value","location","resultsStyle","noLocation","locationStyle","handleChange","event","target","onSubmit","preventDefault","submit","locations","setInterval","Math","floor","random","country","region","time","updated","type","placeholder","onChange","App","pos","Date","timer","x","success","substr","url","coords","latitude","longitude","fetch","method","then","res","json","forecast","forecastday","localtime","name","console","log","error","code","message","catch","err","navigator","geolocation","getCurrentPosition","options","clearInterval","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89bd30ec.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass WeatherCard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            title: \"More Details\", //more details button test\r\n            display: \"none\", // display for the more details div\r\n            detailsButtonDisplay: \"none\", //display for the more details button\r\n            current: \"\",\r\n            average: \"\",\r\n            feel: \"\",\r\n            high: \"\",\r\n            low: \"\",\r\n            wind: \"\",\r\n            prec: \"\",\r\n            cel: \"#212121\", //colours of the cel vs fah buttons\r\n            fah: \"grey\",\r\n        }\r\n    }\r\n\r\n    cel = () => { //updates the app to metric\r\n        const data = this.props.data;\r\n        this.setState({\r\n            current: this.props.current.temp_c,\r\n            average: data.day.avgtemp_c,\r\n            feel: this.props.current.feelslike_c,\r\n            high: data.day.maxtemp_c,\r\n            low: data.day.mintemp_c,\r\n            wind: data.day.maxwind_mph + \" mph\",\r\n            prec: data.day.totalprecip_mm + \" mm\",\r\n        })\r\n    }\r\n\r\n    fah = () => { //updates the app to imperial\r\n        const data = this.props.data;\r\n        this.setState({\r\n            current: this.props.current.temp_f,\r\n            average: data.day.avgtemp_f,\r\n            feel: this.props.current.feelslike_f,\r\n            high: data.day.maxtemp_f,\r\n            low: data.day.mintemp_f,\r\n            wind: data.day.maxwind_kph + \" kph\",\r\n            prec: data.day.totalprecip_in + \" in\",\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(oldProps) {\r\n        if(oldProps !== this.props) { // checks if the props have changed, states can only be updated in this if statement to avoid an infinite loop as this is called when a state is changed/updated\r\n            if(this.props.degree === \"cel\") {// change the units to metric\r\n                this.cel();\r\n                this.setState({\r\n                    cel: \"#212121\",\r\n                    fah: \"grey\",\r\n                })\r\n            }\r\n            else { // change the units to imperial\r\n                this.fah();\r\n                this.setState({\r\n                    cel: \"grey\",\r\n                    fah: \"#212121\",\r\n                })\r\n            }\r\n            if(this.props.geoAllowed === false || this.props.geoAllowed === null) { //hides the more details button and details div if no location is found\r\n                this.setState({\r\n                    detailsButtonDisplay: \"none\",\r\n                    display: \"none\",\r\n                    title: \"More Details\",\r\n                })\r\n            }\r\n            else {\r\n                this.setState({\r\n                    detailsButtonDisplay: \"block\",\r\n                    display: \"none\",\r\n                    title: \"More Details\",\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    current = () => { //returns the jsx depending on if a location is found & what card it is beingr ran on\r\n        if(typeof this.props.current === \"object\") { // if the card is the current forecast\r\n            if(typeof this.props.current.condition === \"object\") {// if results have be found\r\n                return (\r\n                    <React.Fragment>\r\n                        <div className=\"forecast\">\r\n                            <img src={this.props.current.condition.icon} height=\"60\" width=\"auto\" alt={this.props.current.condition.text} title={this.props.current.condition.text} />\r\n                            <p className=\"temp\">{this.state.current}</p>\r\n                            <button className=\"temp-buttons cel\" style={{color: this.state.cel}} onClick={() => this.props.changeDegrees(\"cel\")}>&#176;C</button>\r\n                            <button className=\"temp-buttons fah\" style={{color: this.state.fah}} onClick={() => this.props.changeDegrees(\"fah\")}>&#176;F</button>\r\n                            <p className=\"forecast-text\">{this.props.data.day.condition.text}</p>\r\n                        </div>\r\n                        <p>Feels like: {this.state.feel}<span>&#176;</span></p>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n            else { // this runs when the browser is asking for the user's location\r\n                return (\r\n                    <React.Fragment>\r\n                        <div className=\"forecast\">\r\n                            <p className=\"temp\">{this.state.current}</p>\r\n                        </div>\r\n                        <p>Feels like: {this.state.feel}<span>&#176;</span></p>\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n        }\r\n        else { // this runs/loads for the future weather cards and for the current weather card if no location is found\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"forecast\">\r\n                        <img src={this.props.data.day.condition.icon} height=\"60\" width=\"auto\" alt={this.props.data.day.condition.text} title={this.props.data.day.condition.text} />\r\n                        <br className=\"forecast-breaks\" />\r\n                        <br className=\"forecast-breaks\" />\r\n                        <p className=\"forecast-text\">{this.props.data.day.condition.text}</p>\r\n                    </div>\r\n                    <p>Average: {this.state.average}<span>&#176;</span></p>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n    }\r\n\r\n    date = () => {\r\n        let date = this.props.date.substring(8, this.props.date.length);\r\n        date = Number(date);\r\n        let day = this.props.data.date.substring(8, this.props.data.date.length);\r\n        day = Number(day);\r\n        const tom = date + 1;\r\n        const tri = date + 2;\r\n        if(date === day) {// this returns for the current forecast card\r\n            return \"Today\";\r\n        }\r\n        else if(tom === day) {// this returns for the following day's forecast card\r\n            return \"Tomorrow\";\r\n        }\r\n        else if(tri === day) { // this returns for the last day's forecast card\r\n            switch(this.props.day) {\r\n                case \"Mon\": \r\n                    return \"Wednesday\";\r\n                case \"Tue\":\r\n                    return \"Thursday\";\r\n                case \"Wed\":\r\n                    return \"Friday\";\r\n                case \"Thu\":\r\n                    return \"Saturday\";\r\n                case \"Fri\":\r\n                    return \"Sunday\";\r\n                case \"Sat\":\r\n                    return \"Monday\";\r\n                case \"Sun\":\r\n                    return \"Tuesday\";\r\n                default:\r\n                    return this.props.data.date;\r\n            }\r\n        }\r\n        else {// this returns for all cards when the searched for location's date is not the same as the user's date due to time zones - e.g. Australia, New Zealand, etc.\r\n            return this.props.data.date;\r\n        }\r\n    }\r\n\r\n    toggleDetails = () => { // this is called when clicking on the 'more details' button to toggle the additional information\r\n        if(this.state.display === \"none\") {\r\n            this.setState({\r\n                title: \"Hide Details\",\r\n                display: \"block\",\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                title: \"More Details\",\r\n                display: \"none\",\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        const day = this.props.data.day;\r\n        return(\r\n            <div className='weather-card' id={this.props.position}>\r\n                <h3>{this.date()}</h3>\r\n                <div>{this.current()}</div>\r\n                <p>High: {this.state.high}<span>&#176;</span></p>\r\n                <p>Low: {this.state.low}<span>&#176;</span></p>\r\n                <br/>\r\n                <button className=\"details-button\" style={{display: this.state.detailsButtonDisplay}} onClick={this.toggleDetails}>{this.state.title}</button>\r\n                <div className=\"extra-details\" style={{display: this.state.display}}>\r\n                    <p>\r\n                        <i className=\"fas fa-tint\"></i>\r\n                         Humidity: {day.avghumidity}\r\n                        <span style={{fontSize: \"10px\"}}>%</span>\r\n                    </p>\r\n                    <p>\r\n                        <i className=\"fas fa-cloud-rain\"></i>\r\n                         Chance of rain: {day.daily_chance_of_rain}\r\n                        <span style={{fontSize: \"10px\"}}>%</span>\r\n                        </p>\r\n                    <p>\r\n                        <i className=\"fas fa-snowflake\"></i>\r\n                         Chance of snow: {day.daily_chance_of_snow}\r\n                        <span style={{fontSize: \"10px\"}}>%</span>\r\n                    </p>\r\n                    <p>\r\n                        <i className=\"fas fa-wind\"></i>\r\n                         Wind speed: {this.state.wind}\r\n                        <span style={{fontSize: \"10px\"}}></span>\r\n                    </p>\r\n                    <p>\r\n                        <i className=\"fas fa-water\"></i>\r\n                        Precipitation: {this.state.prec}\r\n                        <span style={{fontSize: \"10px\"}}></span>\r\n                    </p>\r\n                    <p>\r\n                        <i className=\"fas fa-sun\"></i>\r\n                        UV: {day.uv}\r\n                    </p>\r\n                    <p>\r\n                        <i className=\"fas fa-coffee\"></i>\r\n                        Sunrise: {this.props.data.astro.sunrise}\r\n                    </p>\r\n                    <p>\r\n                        <i className=\"fas fa-moon\"></i>\r\n                        Sunset: {this.props.data.astro.sunset}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nWeatherCard.defaultProps = {\r\n    data: {\r\n        date: \"\",\r\n        day: {\r\n            avghumidity: \"\",\r\n            avgtemp_c: \"\",\r\n            avgtemp_f: \"\",\r\n            maxtemp_c: \"\",\r\n            maxtemp_f: \"\",\r\n            mintemp_c: \"\",\r\n            mintemp_f: \"\",\r\n            avgvis_miles: \"\",\r\n            avgvis_km: \"\",\r\n            condition: {\r\n                icon: \"\",\r\n                text: \"\",\r\n            },\r\n            daily_chance_of_rain: \"\",\r\n            daily_chance_of_snow: \"\",\r\n            maxwind_mph: \"\",\r\n            maxwind_kph: \"\",\r\n            totalprecip_mm: \"\",\r\n            totalprecip_in: \"\",\r\n            uv: \"\",\r\n        },\r\n        astro: {\r\n            sunrise: \"\",\r\n            sunset: \"\",\r\n        }\r\n    },\r\n    current: \"\",\r\n}\r\n\r\nexport default WeatherCard;","import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n\r\n    state = {\r\n        value: \"\", // user's input\r\n        location: \"\", // placeholder for the input\r\n    }\r\n\r\n    componentDidMount() {\r\n        // picks a random location for the input placeholder every 30 seconds\r\n        const locations = [\"Bristol\", \"London\", \"Manchester\", \"Glasgow\", \"Cardiff\", \"Dublin\", \"Paris\", \"Berlin\", \"Rome\", \"Stockholm\", \"Sydney\", \"Chicago\", \"Los Angeles\", \"Madrid\", \"Berlin\"];\r\n        setInterval(() => {\r\n            this.setState({\r\n                location: `e.g. ${locations[Math.floor(Math.random() * locations.length)]}`,\r\n            })\r\n        }, 30000);\r\n        this.setState({\r\n            location: `e.g. ${locations[Math.floor(Math.random() * locations.length)]}`,\r\n        })\r\n    }\r\n\r\n    resultsStyle = () => { // this is called by the results div\r\n        if((this.props.geoAllowed && this.props.noLocation === null) || (this.props.geoAllowed && this.props.noLocation === false)) {\r\n            return {display: 'inline-block'} // this will return if a valid location was entered or the user allowed their location\r\n        }\r\n        else {\r\n            return {display: 'none'} // vice versa\r\n        }\r\n    }\r\n\r\n    locationStyle = () => { // this is called by the invalid location div\r\n        this.resultsStyle();\r\n        if(this.props.noLocation === null){\r\n            return {display: 'none'} // this hides the div if a valid location is found\r\n        }\r\n        else {\r\n            return {display: 'block'} // vice versa\r\n        }\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            value: event.target.value, // updates the saved value when the user types in the input\r\n        })\r\n    }\r\n\r\n    onSubmit = event => {\r\n        event.preventDefault();\r\n        this.props.submit(this.state.value); // sends the searched value to the app component for the API request\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <header>\r\n                <div className=\"results\" style={this.resultsStyle()}>\r\n                    <h4>Country: <span className=\"title-results\">{this.props.country}</span></h4>\r\n                    <h4>Location: <span className=\"title-results\">{this.props.location}</span></h4>\r\n                    <h4>Region: <span className=\"title-results\">{this.props.region}</span></h4>\r\n                    <h4>Local Time: <span className=\"title-results\">{this.props.time}</span></h4>\r\n                    <h4>Last Updated: <span className=\"title-results\">{this.props.updated} <span style={{fontSize: \"14px\"}}>(updated every 15 minutes)</span></span></h4>\r\n                    <br/>\r\n                </div>\r\n                <div className=\"location\" style={this.locationStyle()}>\r\n                    <p className=\"noLocation\">{this.props.noLocation}</p>\r\n                    <br/>\r\n                </div>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <p>Enter a location below to update the results:</p>\r\n                    <input type=\"text\" placeholder={this.state.location} onChange={this.handleChange} value={this.state.value} />\r\n                </form>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\n\nimport WeatherCard from \"./Components/Weather-Card\";\nimport Header from \"./Components/Header\";\n\nclass App extends React.Component {\n  state = {\n    data: [], //forecast data for next three days - saved as an array of objects and then the objects are passed down using props\n    current: {}, //forecast for today\n    pos: \"\", //position gathered from browser to manually inputted\n    date: \"\",\n    day: \"\",\n    country: \"\",\n    location: \"\",\n    region: \"\",\n    time: \"\",\n    updated: Date(),\n    degree: \"cel\",\n    noLocation: null, //error message if no location in found\n    geoAllowed: null, // does the user allow the app it's access\n  }\n\n  timer = {\n    timer: null,\n  }\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(this.success, this.error, this.options); //get user's location\n    this.time(); //start timer\n    this.timer.timer = setInterval(() => { //loop timer\n      this.time();\n      this.success(this.state.pos);\n    }, 900000); //15 minutes\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer.timer);\n  }\n\n  time = () => {\n    let x = Date();\n    const time = x.substring(16, x.length -34);\n    this.setState({\n      updated: time,\n    })\n  }\n\n  changeDegrees = degree => { //swap between cel & fah - called from child component \"changeDegrees\"\n    this.setState({\n      degree: degree,\n    })\n  }\n\n  success = pos => { //called when the location is valid\n    let day = Date();\n    day = day.substr(0, day.length - 52); //sun, mon, tue, wed, etc.\n    this.setState({\n      pos: pos,\n      day: day,\n      geoAllowed: true,\n    },\n    () => {\n      let url = null;\n      if(typeof this.state.pos === \"object\") { // if the location is provided by the browser using coordinates\n        url = `https://api.weatherapi.com/v1/forecast.json?key=64e20cef002e4aed9f6164849200505&q=${this.state.pos.coords.latitude},${this.state.pos.coords.longitude}&days=10`;\n      }\n      if(typeof this.state.pos === \"string\") { // if the location is provided by the user using the input field\n        url = `https://api.weatherapi.com/v1/forecast.json?key=64e20cef002e4aed9f6164849200505&q=${this.state.pos}&days=10`;\n      }\n      if(typeof url !== \"undefined\") { // stops the app from gathering data if the location is invalid\n        fetch(url , {\n          method: \"GET\",\n        })\n        .then(res => res.json())\n        .then(\n          data => {\n            if(typeof data.location === \"object\") {\n              this.setState({\n                data: data.forecast.forecastday, //forecast for next three days\n                current: data.current, //today's forecast\n              });\n              let x = data.location.localtime;\n              const date = x.substring(0, x.length -6); //today's date\n              const time = x.substring(11, x.length); // last time the API updated the data\n              this.setState({\n                date: date,\n                country: data.location.country,\n                location: data.location.name,\n                region: data.location.region,\n                time: time,\n                noLocation: null,\n              });\n            }\n            else {\n              console.log(`Error ${data.error.code}: ${data.error.message}`); // invalid location searched\n              this.setState({\n                noLocation: data.error.message,\n                data: \"\",\n                current: \"\",\n                geoAllowed: false,\n              })\n            }\n          }\n        )\n        .catch = err => {\n          console.log(err);\n        }\n      }\n    });\n    this.time(); // record when the last API call was made\n  }\n  \n  error = err => { //called when there is an error with the getting the loctaion\n    this.setState({geoAllowed: false})\n    console.log(err.message);\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n          <Header\n            country={this.state.country}\n            location={this.state.location}\n            region={this.state.region}\n            time={this.state.time}\n            updated={this.state.updated}\n            noLocation={this.state.noLocation}\n            geoAllowed={this.state.geoAllowed}\n            submit={this.success}\n          />\n          <div className=\"container-breaks\"></div>\n          <WeatherCard\n            position=\"current\"\n            current={this.state.current}\n            data={this.state.data[0]}\n            date={this.state.date}\n            day={this.state.day}\n            degree={this.state.degree}\n            changeDegrees={this.changeDegrees}\n            geoAllowed={this.state.geoAllowed}\n          />\n          <div className=\"section-break\"></div>\n          <WeatherCard\n            position=\"tomorrow\"\n            data={this.state.data[1]}\n            date={this.state.date}\n            day={this.state.day}\n            degree={this.state.degree}\n            changeDegrees={this.changeDegrees}\n            geoAllowed={this.state.geoAllowed}\n          />\n          <div className=\"container-breaks\"></div>\n          <WeatherCard\n            position=\"future\"\n            data={this.state.data[2]}\n            date={this.state.date}\n            day={this.state.day}\n            degree={this.state.degree}\n            changeDegrees={this.changeDegrees}\n            geoAllowed={this.state.geoAllowed}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}